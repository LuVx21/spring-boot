package org.luvx.boot.mul.mybatis.config.v1;

import com.zaxxer.hikari.HikariDataSource;
import org.apache.ibatis.session.SqlSessionFactory;
import org.luvx.boot.mul.mybatis.config.DS;
import org.luvx.boot.mul.mybatis.config.DynamicDataSource;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.TransactionManager;

import javax.sql.DataSource;
import java.util.Map;

import static org.luvx.boot.mul.mybatis.common.ConstValue.*;

@Configuration
@MapperScan(
        basePackages = {"org.luvx.boot.mul.mybatis.mapper"},
        sqlSessionTemplateRef = "sqlSessionTemplate"
)
public class DynamicDataSourceConfigV1 {

    @Bean(name = ds_ds2)
    @ConfigurationProperties(prefix = prefix_ds2)
    public DataSource getDateSourceDs2() {
        return new HikariDataSource();
    }

    @Bean(name = ds_ds1)
    @ConfigurationProperties(prefix = prefix_ds1)
    public DataSource getDateSourceDs1() {
        return new HikariDataSource();
    }

    @Bean(name = dynamicDataSource)
    public DynamicDataSource DataSource(@Qualifier(ds_ds2) DataSource ds2,
                                        @Qualifier(ds_ds1) DataSource ds1) {
        DynamicDataSource dataSource = new DynamicDataSource();
        dataSource.setTargetDataSources(Map.of(
                DS.DSType.ds2, ds2,
                DS.DSType.ds1, ds1
        ));
        dataSource.setDefaultTargetDataSource(ds1);
        return dataSource;
    }

    @Bean(name = ds2SqlSessionFactory)
    public SqlSessionFactory ds2SqlSessionFactory(@Qualifier(ds_ds2) DataSource dataSource) throws Exception {
        return createSqlSessionFactory(dataSource);
    }

    @Bean(name = ds1SqlSessionFactory)
    public SqlSessionFactory ds1SqlSessionFactory(@Qualifier(ds_ds1) DataSource dataSource) throws Exception {
        return createSqlSessionFactory(dataSource);
    }

    private SqlSessionFactory createSqlSessionFactory(DataSource dataSource) throws Exception {
        String locationPattern = "classpath*:**/*Mapper.xml";
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
        bean.setDataSource(dataSource);
        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(locationPattern));

        // org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();
        // configuration.setMapUnderscoreToCamelCase(true);
        // bean.setConfiguration(configuration);
        return bean.getObject();
    }

    @Bean(name = ds2TransactionManager)
    public TransactionManager ds2TransactionManager(@Qualifier(ds_ds2) DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    @Bean(name = ds1TransactionManager)
    public TransactionManager ds1TransactionManager(@Qualifier(ds_ds1) DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    @Bean(name = "sqlSessionTemplate")
    public CustomSqlSessionTemplate sqlSessionTemplate(@Qualifier(ds2SqlSessionFactory) SqlSessionFactory ds2SqlSessionFactory,
                                                       @Qualifier(ds1SqlSessionFactory) SqlSessionFactory ds1SqlSessionFactory) {
        CustomSqlSessionTemplate customSqlSessionTemplate = new CustomSqlSessionTemplate(ds1SqlSessionFactory);
        customSqlSessionTemplate.setTargetSqlSessionFactorys(Map.of(
                ds_ds2, ds2SqlSessionFactory,
                ds_ds1, ds1SqlSessionFactory
        ));
        customSqlSessionTemplate.setDefaultTargetSqlSessionFactory(ds1SqlSessionFactory);
        return customSqlSessionTemplate;
    }
}